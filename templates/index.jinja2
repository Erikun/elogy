<script src="static/js/navigo.min.js"></script>
<script src="static/js/signals.min.js"></script>

<style>

 html, body {
     padding: 0;
     margin: 0;
     height: 100%;
     width: 100%;
 }
 
 #app {
     font-family: 'Avenir', Helvetica, Arial, sans-serif;
     display: flex;
     flex-direction: column;
     height: 100%;
 }

 header.main {
     height: 50px;
     border-bottom: 1px solid grey;
 }

 header.main .title {
     font-size: 200%;
     position: absolute;
 }
 
 section.main {
     display: flex;
     flex-direction: row;
     width: 100%;
     height: calc(100% - 50px);
 }

 #logbooks {
     flex: 1;
     background: #ddd;
     height: 100%;
     border-right: 5px solid #aaa;
     display: flex;
     flex-direction: column;
 }

 #logbooks .logbooks {
     flex: 1;
     padding: 10px;     
}
 

 #logbooks .search {
     flex: 0;
     padding: 10px;          
     border-top: 1px solid #aaa;
 }

 #logbooks .search form{
     margin: 0;
 }
 
 #logbooks .search input {
     width: 100%;
     margin-bottom: 5px;
 }

 #logbooks .search input[type=checkbox] {
     width: 0;
 }

 #logbooks .search label {
     font-size: 90%;
     float: left;
 }
 
 object {
     width: 100%;
     height: 100%;
 }
 
 #entries {
     flex: 2;
     background: #ddd;
     height: 100%;
     border-right: 5px solid #aaa;
 }

 #entry {
     flex: 4;
     display: flex;
     flex-direction: column;
     height: 100%;
     max-width: 100%;
     overflow-x: auto;
 }

 #entry article {
     flex: 10;
     height: 100%;
     overflow-y: auto;
 }

 .logbook.selected {
     background: white;
 }

 ul {
     padding-left: 20px;     
 }

</style>


{% macro logbook_children(logbook) %}

<div class="logbook" id="{{ logbook.id }}">
    <a href="/#/logbook/{{logbook.id}}">
        {{logbook.name}}
    </a>
</div>
    
{% if logbook.children %}
<ul>
    {% for child in logbook.children %}
    <li class="logbook">
        {{logbook_children(child)}}
    </li>
    {% endfor %}
</ul>
{% endif %}

{% endmacro %}


<div id="app">
    <header class="main">
        <div class="title">{{ title | safe }}</div>
    </header>
    <section class="main">
        <nav id="logbooks">
            <div class="logbooks">
                <a href="/logbooks/new">New</a>
                <ul>
                    {% for logbook in logbooks %}
                    <li class="logbook">
                        {{ logbook_children(logbook) }}
                    </li>
                    {% endfor %}
                </ul>
            </div>
            <div class="search">
                Search entries
                <form action="/search/" target="entries">
                    <div>
                        <label for="all-logbooks">
                            <input name="all-logbooks" type="checkbox"/>
                            This logbook
                        </label>
                        <label for="include-chidlren">
                            <input name="include-children" type="checkbox"/>
                            Include children
                        </label>
                    </div>
                    <input name="content" placeholder="Content"/>
                    <input name="title" placeholder="Title"/>
                    <input name="authors" placeholder="Author"/>
                    <button type="submit">Search</button>
                </form>
            </div>
        </nav>
        <nav id="entries">
            <object name="entries" frameborder="no" type="text/html" data="about:blank"></object>
        </nav>
        <div id="entry">
            <object name="entry" frameborder="no" type="text/html" data="about:blank"></object>
        </div>
    </section>
</div>


<script type="text/javascript">

 // A simple centralized event bus that we'll use to decouple
 // things a bit. We'll send out events for various important
 // changes, and components may listen to them as they need.
 window.eventbus = {
     entrySelected: new signals.Signal(),
     logbookSelected: new signals.Signal()
 };

 function markLogbook(logbookId, unmark) {
     document.querySelectorAll('.logbook')
             .forEach(function (element) {
                 element.classList.remove("selected")
             });
     if (logbookId) {
         var element = document.getElementById(logbookId);
         element.classList.add("selected")
     }
 } 

 
 window.addEventListener("load", function () {

     var entries = document.querySelector('object[name="entries"]'),
         entry = document.querySelector('object[name="entry"]');

     // === eventbus listeners ===
     
     function handleLogbook(logbookId, entryId) {
         var entriesUrl = "/logbooks/" + logbookId;
         // updating the entries list is expensive so let's only
         // do that if the logbook has actually changed
         console.log(entries)
         console.log("URL", entries.data, "http://localhost:5000" + entriesUrl);
         if (!entries.contentDocument) {
             // looks like the contentDocument does not initially exist
             entries.data = entriesUrl;
         } else if (entries.contentDocument.location.pathname !== entriesUrl) {
             entries.contentDocument.location = (
                 entriesUrl + window.location.search + (
                     entryId? "#" + entryId : "")
             );
         }
         markLogbook(logbookId)
     }
     eventbus.logbookSelected.add(handleLogbook)
     
     function handleEntry(entryId, followupId) {
         console.log("entry", entryId, followupId)
         if (entryId) {
             var entryUrl = "/entries/" + entryId;
             // if the routed URL points to a followup, we'll tack that
             // to the end of the URL so that the view is scrolled to it
             if (followupId) {
                 entryUrl += "#" + followupId;
             }
             entry.data = entryUrl;
         } else {
             // no entry selected; show a placeholder
             window.open("about:blank", "entry");
         }
     }     
     eventbus.entrySelected.add(handleEntry);

     window.addEventListener("unload", function() {
         // cleanup
         eventbus.entrySelected.remove(handleLogbook);
         eventbus.entrySelected.remove(handleEntry);
     });

     // === Routing ===
     // We need this in order for browser history to
     // work, since the state of the application must be encoded in
     // the url somehow. It's a little hacky (uses the 'hash' part of
     // the location) but it's simple and pretty flexible.
     
     function goTo(params) {
         console.log("goTo", params)
         eventbus.logbookSelected.dispatch(params.logbookId, params.entryId);
         eventbus.entrySelected.dispatch(params.entryId, params.followupId);
     }
     
     var router = new Navigo(null, true);
     router
         .on("/logbook/:logbookId/entry/:entryId/:followupId", goTo)
         .on("/logbook/:logbookId/entry/:entryId", goTo)
         .on("/logbook/:logbookId", goTo)     
         .resolve();

     console.log("router", router)
     
 });
 
</script>
